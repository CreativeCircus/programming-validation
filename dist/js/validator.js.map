{"version":3,"sources":["Validator.js"],"names":["Validator","selector","console","log","$field","document","querySelector","warn","alt","fieldName","name","replace","$errorContainer","parentElement","createElement","classList","add","appendChild","errors","uid","Math","floor","random","addEventListener","validate","bind","showErrors","$oldErrorMessages","querySelectorAll","forEach","$el","remove","value","push","length","style","borderColor","error","innerHTML"],"mappings":";;;;;;IAAMA,S;AACL,oBAAYC,QAAZ,EAAsB;AAAA;;AACrBC,UAAQC,GAAR,CAAY,4BAAZ;;AAEA;AACA,OAAKC,MAAL,GAAcC,SAASC,aAAT,CAAuBL,QAAvB,CAAd;AACA,MAAI,CAAC,KAAKG,MAAV,EAAkB;AACjBF,WAAQK,IAAR,4CAAuDN,QAAvD;AACA,UAAO,KAAP;AACA;;AAED;AACA,MAAI,KAAKG,MAAL,CAAYI,GAAhB,EAAqB;AACpB,QAAKC,SAAL,GAAiB,KAAKL,MAAL,CAAYI,GAA7B;AACA,GAFD,MAEO;AACN,QAAKC,SAAL,GAAiB,KAAKL,MAAL,CAAYM,IAAZ,CAAiBC,OAAjB,CAAyB,GAAzB,EAA8B,GAA9B,EAAmCA,OAAnC,CAA2C,GAA3C,EAAgD,GAAhD,CAAjB,CADM,CACiE;AACvE;;AAED;AACA;AACA,OAAKC,eAAL,GAAuB,KAAKR,MAAL,CAAYS,aAAZ,CAA0BP,aAA1B,CAAwC,gBAAxC,CAAvB;;AAEA;AACA,MAAI,CAAC,KAAKM,eAAV,EAA2B;AAC1B;AACA,QAAKA,eAAL,GAAuBP,SAASS,aAAT,CAAuB,KAAvB,CAAvB;AACA,QAAKF,eAAL,CAAqBG,SAArB,CAA+BC,GAA/B,CAAmC,eAAnC;AACA,QAAKZ,MAAL,CAAYS,aAAZ,CAA0BI,WAA1B,CAAuC,KAAKL,eAA5C;AACA;;AAED;AACA,OAAKM,MAAL,GAAc,EAAd;;AAEA;AACA;AACA,OAAKC,GAAL,GAAWC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,KAA3B,CAAX;;AAEA;AACA;AACA;AACA,OAAKlB,MAAL,CAAYmB,gBAAZ,UAAsC,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAtC;AACA,OAAKrB,MAAL,CAAYmB,gBAAZ,SAAqC,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAArC;;AAEA;AACA;AACA;AACA,OAAKrB,MAAL,CAAYmB,gBAAZ,UAAsC,KAAKG,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAtC;AACA,OAAKrB,MAAL,CAAYmB,gBAAZ,SAAqC,KAAKG,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAArC;AACA;;;;6BAEU;AACVvB,WAAQC,GAAR;;AAEA;AACA,QAAKe,MAAL,GAAc,EAAd;;AAEA;AACA,OAAIS,oBAAoB,KAAKf,eAAL,CAAqBgB,gBAArB,2BAA8D,KAAKT,GAAnE,QAAxB;AACAQ,qBAAkBE,OAAlB,CAA0B,UAACC,GAAD,EAAS;AAClC;AACAA,QAAIC,MAAJ;AACA,IAHD;;AAKA;AACA,OAAI,CAAC,KAAK3B,MAAL,CAAY4B,KAAjB,EAAwB;AACvB;AACA,SAAKd,MAAL,CAAYe,IAAZ,gCAA8C,KAAKxB,SAAnD;AACA;;AAED;AACA;;;+BAEY;AAAA;;AACZP,WAAQC,GAAR;;AAEA,OAAI,KAAKe,MAAL,CAAYgB,MAAhB,EAAwB;AACvB,SAAK9B,MAAL,CAAY+B,KAAZ,CAAkBC,WAAlB;AACA,SAAKlB,MAAL,CAAYW,OAAZ,CAAoB,UAACQ,KAAD,EAAW;AAC9B,WAAKzB,eAAL,CAAqB0B,SAArB,gCAA4D,MAAKnB,GAAjE,UAAyEkB,KAAzE;AACA,KAFD;AAGA,IALD,MAKO;AACN,SAAKjC,MAAL,CAAY+B,KAAZ,CAAkBC,WAAlB;AACA;AACD","file":"Validator.js","sourcesContent":["class Validator {\n\tconstructor(selector) {\n\t\tconsole.log('constructor from Validator')\n\n\t\t// find the field, show an error if it's not availble\n\t\tthis.$field = document.querySelector(selector);\n\t\tif (!this.$field) {\n\t\t\tconsole.warn(`Couldn't find an element with selector`, selector)\n\t\t\treturn false;\n\t\t}\n\n\t\t// Fetch a formatted name for the field from the alt tag, and fall back to the field's name tag \n\t\tif (this.$field.alt) {\n\t\t\tthis.fieldName = this.$field.alt;\n\t\t} else {\n\t\t\tthis.fieldName = this.$field.name.replace('_', ' ').replace('-', ' '); // with some formatting help\n\t\t}\n\n\t\t// find an error container if one already exists from another validator on this field,\n\t\t// or on it's sibling fields (like day, month, year fields for a date of birth field group)\n\t\tthis.$errorContainer = this.$field.parentElement.querySelector('.error-message');\n\n\t\t// if the error container DOESN'T already exist from another validator,\n\t\tif (!this.$errorContainer) {\n\t\t\t// make an element to show errors in\n\t\t\tthis.$errorContainer = document.createElement('div');\n\t\t\tthis.$errorContainer.classList.add('error-message');\n\t\t\tthis.$field.parentElement.appendChild( this.$errorContainer );\n\t\t}\n\n\t\t// keep track of errors\n\t\tthis.errors = [];\n\n\t\t// generate a unique identifier for this validator. \n\t\t// we'll use it later to make sure this validator doesnt mess with the error messages of other validators.\n\t\tthis.uid = Math.floor(Math.random() * 10000);\n\n\t\t// add event listener to call this.validate, \n\t\t// but overrule its _this_ logic, and force its\n\t\t// _this_ to be the Validate class instance, not the DOM element that triggers this event\n\t\tthis.$field.addEventListener(`keyup`, this.validate.bind(this))\n\t\tthis.$field.addEventListener(`blur`, this.validate.bind(this))\n\n\t\t// add event listener to call this.showErrors (after validation), \n\t\t// but overrule its _this_ logic, and force its\n\t\t// _this_ to be the Validate class instance, not the DOM element that triggers this event\n\t\tthis.$field.addEventListener(`keyup`, this.showErrors.bind(this))\n\t\tthis.$field.addEventListener(`blur`, this.showErrors.bind(this))\n\t}\n\n\tvalidate() {\n\t\tconsole.log(`validate in Validator`)\n\n\t\t// empty out the array of collected error message text\n\t\tthis.errors = [];\n\n\t\t// find in the DOM any error messages pertaining to this particular validator\n\t\tlet $oldErrorMessages = this.$errorContainer.querySelectorAll(`[data-validator-uid=\"${this.uid}\"]`);\n\t\t$oldErrorMessages.forEach(($el) => {\n\t\t\t// and remove them\n\t\t\t$el.remove();\n\t\t})\n\n\t\t// simple \"required\" validation. nothing entered in the field? \n\t\tif (!this.$field.value) {\n\t\t\t// add the error message to the list of error messages for this field\n\t\t\tthis.errors.push(`You must fill out the <em>${this.fieldName}</em> field`);\n\t\t}\n\n\t\t// at this point, any other validators that extend this one will run their own logic too\n\t}\n\n\tshowErrors() {\n\t\tconsole.log(`showErrors in Validator`)\n\n\t\tif (this.errors.length) {\n\t\t\tthis.$field.style.borderColor = `red`;\n\t\t\tthis.errors.forEach((error) => {\n\t\t\t\tthis.$errorContainer.innerHTML += `<p data-validator-uid=\"${this.uid}\">${error}</p>`;\n\t\t\t})\n\t\t} else {\n\t\t\tthis.$field.style.borderColor = `green`;\n\t\t}\n\t}\n}\n\n\n"]}