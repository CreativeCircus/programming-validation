{"version":3,"sources":["validator.js"],"names":["Validator","selector","console","log","errors","$oldErrorMessages","$errorContainer","querySelectorAll","uid","forEach","$el","remove","$field","value","push","fieldName","length","style","borderColor","error","innerHTML","document","querySelector","warn","alt","name","replace","parentElement","createElement","classList","add","appendChild","Math","floor","random","addEventListener","validate","showErrors"],"mappings":"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","sourcesContent":["class Validator {\n\tconstructor(selector) {\n\t\tconsole.log('constructor from Validator')\n\n\t\t// find the field, show an error if it's not availble\n\t\tthis.$field = document.querySelector(selector);\n\t\tif (!this.$field) {\n\t\t\tconsole.warn(`Couldn't find an element with selector`, selector)\n\t\t\treturn false;\n\t\t}\n\n\t\t// Fetch a formatted name for the field from the alt tag, and fall back to the field's name tag \n\t\tif (this.$field.alt) {\n\t\t\tthis.fieldName = this.$field.alt;\n\t\t} else {\n\t\t\tthis.fieldName = this.$field.name.replace('_', ' ').replace('-', ' '); // with some formatting help\n\t\t}\n\n\t\t// find an error container if one already exists from another validator on this field,\n\t\t// or on it's sibling fields (like day, month, year fields for a date of birth field group)\n\t\tthis.$errorContainer = this.$field.parentElement.querySelector('.error-message');\n\n\t\t// if the error container DOESN'T already exist from another validator,\n\t\tif (!this.$errorContainer) {\n\t\t\t// make an element to show errors in\n\t\t\tthis.$errorContainer = document.createElement('div');\n\t\t\tthis.$errorContainer.classList.add('error-message');\n\t\t\tthis.$field.parentElement.appendChild( this.$errorContainer );\n\t\t}\n\n\t\t// keep track of errors\n\t\tthis.errors = [];\n\n\t\t// generate a unique identifier for this validator. \n\t\t// we'll use it later to make sure this validator doesnt mess with the error messages of other validators.\n\t\tthis.uid = Math.floor(Math.random() * 10000);\n\n\t\t// add event listener to call this.validate, \n\t\t// but overrule its _this_ logic, and force its\n\t\t// _this_ to be the Validate class instance, not the DOM element that triggers this event\n\t\tthis.$field.addEventListener(`keyup`, this.validate)\n\t\tthis.$field.addEventListener(`blur`, this.validate)\n\n\t\t// add event listener to call this.showErrors (after validation), \n\t\t// but overrule its _this_ logic, and force its\n\t\t// _this_ to be the Validate class instance, not the DOM element that triggers this event\n\t\tthis.$field.addEventListener(`keyup`, this.showErrors)\n\t\tthis.$field.addEventListener(`blur`, this.showErrors)\n\t}\n\n\tvalidate = () => {\n\t\tconsole.log(`validate in Validator`)\n\n\t\t// empty out the array of collected error message text\n\t\tthis.errors = [];\n\n\t\t// find in the DOM any error messages pertaining to this particular validator\n\t\tlet $oldErrorMessages = this.$errorContainer.querySelectorAll(`[data-validator-uid=\"${this.uid}\"]`);\n\t\t$oldErrorMessages.forEach(($el) => {\n\t\t\t// and remove them\n\t\t\t$el.remove();\n\t\t})\n\n\t\t// simple \"required\" validation. nothing entered in the field? \n\t\tif (!this.$field.value) {\n\t\t\t// add the error message to the list of error messages for this field\n\t\t\tthis.errors.push(`You must fill out the <em>${this.fieldName}</em> field`);\n\t\t}\n\n\t\t// at this point, any other validators that extend this one will run their own logic too\n\t}\n\n\tshowErrors = () => {\n\t\tconsole.log(`showErrors in Validator`)\n\n\t\tif (this.errors.length) {\n\t\t\tthis.$field.style.borderColor = `red`;\n\t\t\tthis.errors.forEach((error) => {\n\t\t\t\tthis.$errorContainer.innerHTML += `<p data-validator-uid=\"${this.uid}\">${error}</p>`;\n\t\t\t})\n\t\t} else {\n\t\t\tthis.$field.style.borderColor = `green`;\n\t\t}\n\t}\n}\n\n\n"],"file":"validator.js"}