{"version":3,"sources":["NumberRangeValidator.js"],"names":["NumberRangeValidator","selector","min","max","console","log","numericValue","Number","$field","value","isNaN","errors","push","fieldName","Validator"],"mappings":";;;;;;;;;;;;IAAMA,oB;;;AAEL,+BAAYC,QAAZ,EAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAAA;;AACd;AADc,0IACzBF,QADyB;;AAE/BG,UAAQC,GAAR,CAAY,uCAAZ;AACA,QAAKH,GAAL,GAAWA,GAAX,CAH+B,CAGf;AAChB,QAAKC,GAAL,GAAWA,GAAX,CAJ+B,CAIf;AAJe;AAK/B;;;;6BAEU;AACV;AACAC,WAAQC,GAAR;;AAEA,OAAIC,eAAeC,OAAO,KAAKC,MAAL,CAAYC,KAAnB,CAAnB;AACA,OAAIC,MAAMJ,YAAN,CAAJ,EAAyB;AACxB,SAAKK,MAAL,CAAYC,IAAZ,0BAAwC,KAAKC,SAA7C;AACA;AACD,OAAIP,eAAe,KAAKH,GAAxB,EAA6B;AAC5B,SAAKQ,MAAL,CAAYC,IAAZ,CAAiB,yBAAuB,KAAKC,SAA5B,uCAAyE,KAAKV,GAA/F;AACA;AACD,OAAIG,eAAe,KAAKJ,GAAxB,EAA6B;AAC5B,SAAKS,MAAL,CAAYC,IAAZ,CAAiB,yBAAuB,KAAKC,SAA5B,oCAAsE,KAAKX,GAA5F;AACA;AAED;;;;EAxBiCY,S","file":"NumberRangeValidator.js","sourcesContent":["class NumberRangeValidator extends Validator {\n\n\tconstructor(selector, min, max) {\n\t\tsuper(selector); // call constructor in Validator()\n\t\tconsole.log('constructor from NumberRangeValidator')\n\t\tthis.min = min; // take arguments and put them into properties of the class\n\t\tthis.max = max; // take arguments and put them into properties of the class\n\t}\n\n\tvalidate() {\n\t\tsuper.validate();\n\t\tconsole.log(`validate in NumberRangeValidator`)\n\n\t\tlet numericValue = Number(this.$field.value);\n\t\tif (isNaN(numericValue)) {\n\t\t\tthis.errors.push(`Number in field <em>${this.fieldName}</em> must be a real number`);\n\t\t}\n\t\tif (numericValue > this.max) {\n\t\t\tthis.errors.push(`Number in field <em>${this.fieldName}</em> must not be greater than ` + this.max);\n\t\t}\n\t\tif (numericValue < this.min) {\n\t\t\tthis.errors.push(`Number in field <em>${this.fieldName}</em> must not be less than ` + this.min);\n\t\t}\n\n\t}\n}"]}